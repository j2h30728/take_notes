// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  password   String?
  email      String?  @unique
  bio        String?
  avatar     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  products Product[]
  tweets   Tweet[]
  likes    Like[]
  Comment  Comment[]
}

model Product {
  id          Int    @id @default(autoincrement())
  description String
  title       String
  price       Float
  photo       String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@index([userId])
}

model Like {
  created_at DateTime @default(now())

  tweet   Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int

  @@unique([tweetId, userId], name: "id")
  @@index([userId])
  @@index([tweetId])
}

model Tweet {
  id          Int    @id @default(autoincrement())
  description String
  title       String
  photo       String
  views       Int    @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  likes    Like[]
  comments Comment[]

  @@index([userId])
}

model Comment {
  id   Int    @id @default(autoincrement())
  text String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  tweet   Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId Int

  @@index([userId])
  @@index([tweetId])
}
